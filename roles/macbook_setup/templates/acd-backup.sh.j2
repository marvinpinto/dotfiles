#!/bin/bash

# pipefail is useful
set -o pipefail

# Global variables
PROGRAM_NAME="acd-backup"
SYSLOG_TAG="${PROGRAM_NAME}"
LOCKFILE="${HOME}/tmp/${PROGRAM_NAME}-lockfile.txt"
RCLONE="/usr/local/bin/rclone"
RCLONE_FILTERS="${HOME}/.rclone-filters"
BACKUP_LOCAL="${HOME}/Dropbox"
BACKUP_UPSTREAM="s3backup:{{ acd_backups_s3_bucket_name }}/files/Dropbox"
TIMESTAMP="${HOME}/tmp/backup-timestamp.txt"

info() {
  /usr/bin/logger --id --priority local3.info --tag ${SYSLOG_TAG} "INFO: $@"
}

warn() {
  /usr/bin/logger --id --stderr --priority local3.warning --tag ${SYSLOG_TAG} "WARN: $@"
}

error() {
  /usr/bin/logger --id --stderr --priority local3.err --tag ${SYSLOG_TAG} "ERROR: $@"
  exit 1
}

cleanup() {
  info "Cleaning up!"
  rm -f ${LOCKFILE}
}

if [ -e ${LOCKFILE} ] && kill -0 `cat ${LOCKFILE}` 2>/dev/null; then
  warn "${PROGRAM_NAME} already running"
  exit
fi

# make sure the lockfile is removed when we exit and then claim it
trap cleanup SIGHUP SIGINT SIGTERM

# echo our PID into the lockfile
echo $$ > ${LOCKFILE}

rm -f ${TIMESTAMP}

case "$1" in
  up)
    # Sync all the upstream files using the local files as the source
    ${RCLONE} \
      --filter-from ${RCLONE_FILTERS} \
      --transfers 10 \
      --checkers 10 \
      --update \
      sync ${BACKUP_LOCAL} ${BACKUP_UPSTREAM} \
      2>&1 | /usr/bin/logger --id \
      --priority 'local3.info' \
      --tag "${SYSLOG_TAG}"

    if [ $? -eq 0 ]; then
      info "Local to remote sync completed successfully"
      echo `date` > ${TIMESTAMP}
    else
      warn "Error completing backup"
    fi
    ;;
  down)
    # Sync all the files locally using the upstream as the source
    ${RCLONE} \
      --filter-from ${RCLONE_FILTERS} \
      --transfers 10 \
      --checkers 10 \
      --update \
      sync ${BACKUP_UPSTREAM} ${BACKUP_LOCAL} \
      2>&1 | /usr/bin/logger --id \
      --priority 'local3.info' \
      --tag "${SYSLOG_TAG}"

    if [ $? -eq 0 ]; then
      info "Remote to local sync completed successfully"
      echo `date` > ${TIMESTAMP}
    else
      warn "Error completing backup"
    fi
    ;;
  *)
    error "Usage: ${PROGRAM_NAME} <up | down> (you supplied $1)"
    ;;
esac

# Cleanup
cleanup
