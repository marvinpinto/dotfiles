# vim: set filetype=sh :

#****************
# Shell options
#****************

# Use Vi, not Emacs, style editing
set editing-mode vi
set keymap vi

# vi mode in bash
set -o vi

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

shopt -s checkwinsize

# Set the correct terminal size
eval $(/usr/bin/resize)

#***************
# Bash Exports
#***************

# Set the terminal type to xterm-256color
export TERM=xterm-256color

# Make vim the default editor
export EDITOR="vim"

# Larger bash history
export HISTSIZE=2000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Prefer US English and use UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# Don’t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Fancy ls colors
export CLICOLOR='Yes'
export LSCOLORS='ExGxCxDxBxegedabagacad'

# Prevent 'less' from
export LESS="-i -R"
export LESSHISTFILE='/dev/null'
export LESSHISTSIZE=0

# git prompt related environment variables
export GIT_PS1_SHOWDIRTYSTATE='yes'
export GIT_PS1_SHOWSTASHSTATE='yes'
export GIT_PS1_SHOWUNTRACKEDFILES='yes'

# Needed for pinentry-curses + friends
export GPG_TTY=`tty`
gpg-connect-agent updatestartuptty /bye >/dev/null


#***************
# Bash Aliases
#***************

# Colored grep
alias grep="grep --color=auto"

# Use gpg2 by default
alias gpg="/usr/bin/gpg2"

# List all files colorized in long format
alias l="ls -lF --color"

# List all files colorized in long format, including dot files
alias la="ls -laF --color"

# List only directories
alias lsd="ls -lF --color | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls --color"

# List and kill off tmux sessions
alias tls='/usr/bin/tmux ls'
alias tks='/usr/bin/tmux kill-session -t '

# Alias git to g
alias g="git"

# Docker related aliases
alias drm="docker rm -f"
alias dps="docker ps"

# Command line weather
alias weather="curl http://wttr.in/M6P"

# System Update
alias yoloupdate="sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean && sudo apt-get autoremove -y --purge"

# Alias docker-compose to dc
alias dc="docker-compose"

# XKCD style password generator
alias xkcdpass="shuf -n4 /usr/share/dict/words | tr '\r\n' '-' | tr -d \' | sed 's/-$//'"

#************
# GPG agent
#************
if [ "$(lsb_release --release --short)" == "16.04" ]; then
  export SSH_AUTH_SOCK=${HOME}/.gnupg/S.gpg-agent.ssh
elif [ -f "${HOME}/.gnupg/gpg-agent-info" ]; then
  . "${HOME}/.gnupg/gpg-agent-info"
  export GPG_AGENT_INFO
  if [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    SSH_AUTH_SOCK=/ssh-agent
  fi
  export SSH_AUTH_SOCK
fi


#*****************
# Tab Completion
#*****************

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
if [ -e "$HOME/.ssh/config" ]; then
  complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2 | tr ' ' '\n')" scp sftp ssh cs
fi

# If possible, add tab completion for many more commands
if [ -f /etc/bash_completion ]; then
  source /etc/bash_completion
fi


#************
# NVM setup
#************
export NVM_DIR="/usr/local/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
if [ -f '/.dockerenv' ] && [ -f '.nvmrc' ]; then
  # If we're inside a docker container and there is a .nvmrc file present,
  # issue an `nvm use` and automatically use that nodejs version.
  nvm use
fi


#**************
# Bash Prompt
#**************

function __prompt_command() {
  local EXIT="$?"
  PS1=""

  # Set the terminal title
  echo -ne "\033]0;${HOSTNAME}\007"

  local RED="\[$(tput setaf 1)\]"
  local GREEN="\[$(tput setaf 2)\]"
  local YELLOW="\[$(tput setaf 3)\]"
  local BLUE="\[$(tput setaf 4)\]"
  local MAGENTA="\[$(tput setaf 5)\]"
  local CYAN="\[$(tput setaf 6)\]"
  local WHITE="\[$(tput setaf 7)\]"
  local BOLD="\[$(tput bold)\]"
  local UNDERLINE="\[$(tput sgr 0 1)\]"
  local RESET="\[$(tput sgr0)\]"
  local PROMPTCOL="${YELLOW}"

  if [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    PS1+="\n${GREEN}"
  elif [ `id -u` == 0 ]; then
    # Bright red prompt if root
    PS1+="\n${RED}"
  else
    PS1+="\n${PROMPTCOL}"
  fi

  # Second line of bash prompt
  if [ -f '/.dockerinit' ]; then
    # We're inside a docker environment
    PS1+="[docker-\H: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  else
    PS1+="[\H: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  fi

  # Print out the last exit code, if it wasn't zero
  if [ $EXIT != 0 ]; then
    PS1+="${RED}[${EXIT}]${RESET} "
  fi

  # Finally print out a $ or #, depending on uid
  PS1+="${PROMPTCOL}\\$ ${RESET}"
}

export PROMPT_COMMAND=__prompt_command  # Func to gen PS1 after CMDs

#*******************
# Helper Functions
#*******************

# Simple calculator
function calc() {
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Function to clean up docker containers
function drma() {
  local dps=$(docker ps -aq)
  if [ -n "$dps" ]; then
    docker rm -f $dps
  fi

  # Delete all untagged docker images
  local untagged=$(docker images | grep "^<none>" | awk "{print $3}")
  if [ -n "$untagged" ]; then
    docker rmi -f $untagged
  fi
}

# Bash function to attach to, or spin up a new (named) docker container
function sink () {
  local boxname=$1
  local dockerargs=$2
  local workdir="/root"

  if [ -z "$boxname" ]; then
    echo "usage: sink <box name> [extra docker args]"
    echo "e.g. sink tidycat-ui \"-p 4200:4200\""
    return 1
  fi

  if [ -e "${HOME}/projects/${boxname}" ]; then
    workdir="/root/projects/${boxname}"
  fi

  local dockerid=$(docker ps -aq --filter=name=$boxname)
  if [ "$dockerid" != "" ]; then
    echo "Attaching to existing docker container ${dockerid}"
  else
    echo "Creating new docker container"
    dockerid=$(docker run -dit \
      -e "HOSTNAME=${boxname}" \
      --log-driver=none \
      --name $boxname \
      --hostname ${boxname} \
      -v /home/marvin:/var/shared \
      -v $SSH_AUTH_SOCK:/ssh-agent \
      -e SSH_AUTH_SOCK=/ssh-agent \
      -e DISPLAY \
      -v /tmp/.X11-unix:/tmp/.X11-unix \
      -v /media/usb:/media/usb \
      --security-opt=seccomp:unconfined \
      $dockerargs \
      -w $workdir \
      "quay.io/marvin/kitchensink:$(lsb_release --release --short)")
  fi
  docker exec -it $dockerid /bin/bash
}

# Delete an EC2 AMI & corresponding snapshot
function delete-ec2-ami() {
  local ami_id=$1

  if [ -z "$ami_id" ]; then
    echo "usage: delete-ec2-ami <ami_id>"
    return 1
  fi

  local snap_id=$(aws ec2 describe-snapshots --filters Name=description,Values="*${ami_id}*" | python -c 'import sys, json; print json.load(sys.stdin)["Snapshots"][0]["SnapshotId"]')

  aws ec2 deregister-image --image-id ${ami_id}
  aws ec2 delete-snapshot --snapshot-id ${snap_id}
}

# Mirror my laptop display to the connected monitor (i.e. presentation mode!)
function presentation-mode() {
  local display=$(xrandr | grep -v LVDS1 | grep " connected" | cut -d" " -f1)
  xrandr --output ${display} --same-as LVDS1
}

# Turn off the laptop display when connected to an external monitor
function docked-mode() {
  xrandr --output eDP1 --off
}

# Start my irssi im container
function im() {
  local container_name=irssi
  if [ "$(docker ps -aq -f name=${container_name})" ]; then
    docker rm -f ${container_name}
  fi

  docker run -it \
    --log-driver=none \
    --name ${container_name} \
    -e TERM \
    -u root:root \
    -v $HOME/.irssi:/home/user/.irssi \
    -v /etc/localtime:/etc/localtime \
    irssi:alpine \
    irssi --config=/home/user/.irssi/config-im --home=/home/user/.irssi
}

# Launch a containerized gimp
function docker-gimp() {
  xhost local:root
  docker run -it \
    --log-driver=none \
    --rm \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=$DISPLAY \
    -v ${HOME}/crap:/root/Pictures \
    --name gimp \
    jess/gimp
}

# Launch a containerized chrome
function docker-chrome() {
  xhost local:root
  docker run -it \
    --log-driver=none \
    --rm \
    --net host \
    --cpuset-cpus 0 \
    --memory 512mb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=$DISPLAY \
    -v $HOME/crap:/root/Downloads \
    --device /dev/snd \
    --name chrome \
    jess/chrome
}

# Launch a containerized inkscape
function docker-inkscape() {
  xhost local:root
  docker run -it \
    --log-driver=none \
    --rm \
    -u root \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME/.Xauthority:/home/inkscaper/.Xauthority \
    -e DISPLAY=$DISPLAY \
    -v $HOME/crap:/home/inkscaper/Downloads \
    --name inkscape \
    andressrg/inkscape-fonts
}

# Launch a containerized bittorrent client
function docker-bittorrent() {
  echo "http://docktorrent:p@ssw0rd@`docker inspect --format '{{ .NetworkSettings.IPAddress }}' bittorrent`"
  echo "May need to futz with the $HOME/bittorrent permissions a bit"
  mkdir -p ${HOME}/bittorrent
  rm -f ${HOME}/bittorrent/.session/rtorrent.lock
  docker rm -f bittorrent || true
  docker run -it \
    --log-driver=none \
    --rm \
    -p 45566:45566 \
    -p 9527:9527/udp \
    --dns 8.8.8.8 \
    -v $HOME/bittorrent:/rtorrent \
    -e UPLOAD_RATE=1024 \
    --name bittorrent \
    kfei/docktorrent
}

# Launch a containerized vlc client
function docker-vlc() {
  mkdir -p ${HOME}/bittorrent
  docker run -it \
    --log-driver=none \
    --rm \
    -v $HOME/bittorrent:/home/vlc/Documents:rw \
    -v /dev/snd:/dev/snd --privileged \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e uid=$(id -u) \
    -e gid=$(id -g) \
    -e DISPLAY=unix$DISPLAY \
    --name vlc \
    chrisdaish/vlc
}

# Launch a containerized letsencrypt client
function docker-letsencrypt() {
  docker run -it \
    --log-driver=none \
    --rm \
    --name letsencrypt \
    -v "${HOME}/Dropbox/lets-encrypt/etc:/etc/letsencrypt" \
    -v "${HOME}/Dropbox/lets-encrypt/lib:/var/lib/letsencrypt" \
    quay.io/letsencrypt/letsencrypt:latest \
    -a manual \
    --verbose \
    auth
  sudo chown -R marvin: ${HOME}/Dropbox/lets-encrypt
}

function adiff() {
  local commit="$1"
  local file="$2"
  local vault_password_file="$3"

  if [ -z "$commit" -o -z "$file" ]; then
    echo "usage: adiff <commit> <file> [vault_password_file]"
    return 1
  fi

  if [ -z "$vault_password_file" ]; then
    vault_password_file=vault_pass.py
  fi

  diff -u \
    <( ansible-vault --vault-password-file="${vault_password_file}" view <( git show "${commit}^":"${file}" )) \
    <( ansible-vault --vault-password-file="${vault_password_file}" view <( git show "${commit}":"${file}" ))
}

# Determine size of a remote file via a HEAD request
function rfs() {
  local url="$1"

  if [ -z "$url" ]; then
    echo "usage: rfs <url>"
    return 1
  fi

  curl -sIL "$url" | grep Content-Length | sed 's/[^0-9]//g' | numfmt --to=si
}

# APG alias for friendly passwords
function apgf() {
  local num="$1"

  if [ -z "$num" ]; then
    echo "usage: apgf <length>"
    return 1
  fi

  apg -a 0 -n "$num" -m "$num" -t -E lI10O -M NCSL
}

# Launch a container to manage gpg tasks
function docker-gpg() {
  docker run -it \
    --rm \
    --log-driver=none \
    --name gpg \
    -v "/media/usb0:/media/usb" \
    -w /media/usb \
    "quay.io/marvin/kitchensink:$(lsb_release --release --short)"
}

# Bash function to export the environment variables in the specified .env file
function dotenv () {
  local dotenvfile=$1

  if [ -z "$dotenvfile" ]; then
    dotenvfile=".env"
  fi

  export $(cat ${dotenvfile} | grep -v ^# | xargs)
}

# Bash function to unset the environment variables in the specified .env file
function undotenv () {
  local dotenvfile=$1

  if [ -z "$dotenvfile" ]; then
    dotenvfile=".env"
  fi

  unset $(cat ${dotenvfile} | grep -v ^# | sed -E 's/(.*)=.*/\1/' | xargs)
}

function clical () {
  local force_create=$1
  local image_label=clical

  if [ -n "$force_create" ] && [ "$force_create" == "-f" ]; then
    echo "**** Deleting image ${image_label} ****"
    docker rmi -f $(docker images -aq --filter reference=${image_label}:latest)
  fi

  if [ ! "$(docker images -aq --filter reference=${image_label}:latest)" ]; then
    echo "**** Building image ${image_label} ****"
    docker build --tag ${image_label}:latest -<<EOF
    FROM ubuntu:16.04

    # 'remind' + other needed utils
    RUN apt-get -qq update \
      && apt-get install -y \
        wget \
        libical-parser-html-perl \
        remind \
      && apt-get clean autoclean \
      && apt-get autoremove -y --purge \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && rm -rf /var/lib/{apt,dpkg,cache,log}/

    # Install the perl version of the ical2rem format converter
    RUN wget -O /usr/local/bin/ical2rem https://raw.githubusercontent.com/marvinpinto/config/tdelta-lead-time/scripts/ical2rem.pl \
      && chmod 0755 /usr/local/bin/ical2rem
EOF
  fi

  docker run \
    --rm \
    --log-driver=none \
    -v $HOME/.clical:/root/.clical \
    --name ${image_label} \
    -it \
    clical:latest \
    /usr/bin/remind /root/.clical/main.ini
}
